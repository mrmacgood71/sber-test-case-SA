openapi: 3.0.4

info:
  title: Book Service API
  version: 1.0.0
  description: API for managing bookManagementService in a library ConfigurationsService
servers:
  - url: https://devUrl/api/v1
  - url: https://testUrl/api/v1
  - url: https://predProdUrl/api/v1
  - url: https://prodUrl/api/v1
tags:
  - name: BookManagementService
    description: Сервис для работы с книгами
  - name: NotificationService
    description: Сервис работы с уведомлениями
  - name: BookingService
    description: Сервис для работы с бронированием и выдачей книг
  - name: ImportService
    description: Сервис для работы с импортом устаревших данных
  - name: ConfigurationsService
    description: Сервис для работы с конфигурациями

paths:
  # Existing endpoints (BookManagementService, Abonements, Notifications)
  /books:
    get:
      tags:
        - BookManagementService
      parameters:
        - name: filter
          in: query
          required: false
          schema:
            type: string
            default: book.bookId
          description: Фильтр для поиска книг по параметру
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Номер страницы для пагинации
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Количество книг на странице для пагинации
        - name: order
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
          description: Порядок сортировки книг (asc - по возрастанию, desc - по убыванию)
      summary: Найти все книги
      operationId: getAllBookManagementService
      security:
        - BearerToken: []
      responses:
        "200":
          description: Список книг успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        "204":
          description: Список книг пуст
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - абонемент заблокирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                errorCode: "BOOK_ACCESS_ERROR"
                errorMessage: "Невозможно получить книги, так как ваш абонемент заблокирован. Пожалуйста, свяжитесь с библиотекой для получения дополнительной информации."
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /books/{bookId}:
    get:
      tags:
        - BookManagementService
      summary: Найти книгу по ID
      operationId: getBookById
      security:
        - BearerToken: []
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор книги
      responses:
        "200":
          description: Информация о книге успешно получена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Книга не найдена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /books/{bookId}/reserve:
    post:
      tags:
        - BookManagementService
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор книги для бронирования
      summary: Забронировать книгу
      operationId: reserveBook
      security:
        - BearerToken: []
      responses:
        "200":
          description: Книга успешно забронирована
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Книга не найдена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict - бронирование не удалось из-за ограничений
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # User's reserved bookManagementService
  /users/{userId}:
    get:
      tags:
        - Users
      summary: Получить информацию о пользователе
      operationId: getUserStatus
      security:
        - BearerToken: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор пользователя
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum: [SHORT, FULL]
          description: Тип информации о пользователе (SHORT - краткая информация, FULL - полная информация)
      responses:
        "200":
          description: Информацииия о пользователе успешно получена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStatus"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users/{userId}/reservations:
    get:
      tags:
        - Users
      summary: Получить текущие бронирования пользователя
      operationId: getMyReservations
      security:
        - BearerToken: []
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              [
                PENDING,
                CONFIRMED,
                READY_FOR_PICKUP,
                FULFILLED,
                EXPIRED,
                CANCELLED,
              ]
          description: Фильтр по статусу бронирования
      responses:
        "200":
          description: Список текущих бронирований пользователя
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reservation"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users/{userId}/abonements:
    get:
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [ACTIVE, EXPIRED, BLOCKED, SUSPENDED]
          description: Фильтр по статусу абонемента
      tags:
        - Users
      summary: Список абонементов пользователя
      operationId: getAllAbonements
      security:
        - BearerToken: []
      responses:
        "200":
          description: Список абонементов пользователя успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Abonement"
        "204":
          description: Абонементы не найдены
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - страницы абонементов доступны только для авторизованных пользователей
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/{userId}/abonements/{abonementId}:
    put:
      tags:
        - Users
      summary: Изменить состояние абонемента (заблокировать/разблокировать/иное)
      operationId: updateAbonement
      security:
        - BearerToken: []
      parameters:
        - name: abonementId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                block:
                  type: boolean
      responses:
        "200":
          description: Абонемент успешно обновлен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Abonement"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - доступно только для администраторов
    get:
      tags:
        - Users
      summary: Получить информацию об абонементе пользователя по ID
      operationId: getAbonementById
      security:
        - BearerToken: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор пользователя
        - name: abonementId
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор абонемента
      responses:
        "200":
          description: Абонемент успешно получен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Abonement"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Абонемент не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  # Полученные пользователем книги
  /users/{userId}/loans:
    get:
      tags:
        - Users
      summary: Получить список книг, выданных пользователю
      operationId: getMyLoans
      security:
        - BearerToken: []
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [ACTIVE, RETURNED, OVERDUE, LOST, RENEWED]
          description: Filter by loan status
      responses:
        "200":
          description: Список книг, выданных пользователю
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookLoan"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users/{userId}/checkouts:
    get:
      tags:
        - Users
      summary: Получить сроки сдачи книг, выданных пользователю
      operationId: getUsercheckoutsLoans
      security:
        - BearerToken: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [ACTIVE, RETURNED, OVERDUE, LOST, RENEWED]
          description: Фильтр по статусу сроков сдачи книг
      responses:
        "200":
          description: Список сроков сдачи книг, выданных пользователю
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CheckoutLoan"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - доступно только для авторизованных пользователей
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  #Loans endpoint for staff
  /reservations:
    get:
      tags:
        - BookingService
      summary: Получить все бронирования книг (Staff only)
      operationId: getAllReservations
      security:
        - BearerToken: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Номер страницы для пагинации
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Количество книг на странице для пагинации
        - name: userId
          in: query
          required: false
          schema:
            type: string
          description: Фильтр для поиска бронирований по ID пользователя
      responses:
        "200":
          description: Список бронирований книг успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reservation"
        "204":
          description: Бронирования не найдены
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - просмотр бронирований доступен только для авторизованных пользователей
    post:
      tags:
        - BookingService
      summary: Создать новое бронирование книги
      operationId: createReservation
      security:
        - BearerToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: Пользователь, который делает бронирование
                bookId:
                  type: string
                  description: Книга, которую нужно забронировать
                isOverbooking:
                  type: boolean
                  description: Если true, бронирование будет выполнено с учетом возможности overbooking'a
              required:
                - userId
                - bookId
      responses:
        "201":
          description: Бронирование успешно создано
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        "400":
          description: Bad request - книга недоступна, пользователь заблокирован, и т.д.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - недостаточно прав для создания бронирования
  /loans:
    get:
      tags:
        - BookingService
      summary: Получить все выданные книги (Staff only)
      operationId: getAllLoans
      security:
        - BearerToken: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Номер страницы для пагинации
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Количество книг на странице для пагинации
        - name: userId
          in: query
          required: false
          schema:
            type: string
          description: Фильтр для поиска выданных книг по ID пользователя
      responses:
        "200":
          description: Список выданных книг успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookLoan"
        "204":
          description: Список выданных книг пуст
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - Staff access required
    post:
      tags:
        - BookingService
      summary: Выдать книгу пользователю
      operationId: issueBook
      parameters:
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum: [IGNORE_ABONEMENT_EXPIRY_WARNING, DEFAULT]
          description: Настройка поведения при выдаче книги пользователю с истекающим абонементом
      security:
        - BearerToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: User receiving the book
                bookId:
                  type: string
                  description: Book being issued
                reservationId:
                  type: string
                  description: Идентификатор бронирования, если книга была забронирована
                dueDays:
                  type: integer
                  description: Количество дней, на которые выдается книга (по умолчанию хранится в конфигурации)
              required:
                - userId
                - bookId
                - reservationId
      responses:
        "201":
          description: Книга успешно выдана
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookLoan"
        "400":
          description: Bad request - книга недоступна, пользователь заблокирован, и т.д.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - недостаточно прав для выдачи книги
        "409":
          description: Conflict - абонемент пользователя скоро истечет
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      warning:
                        type: boolean
                        example: true
                      warningMessage:
                        type: string
                        example: "User's abonement expires in 3 days"
  /loans/overdues:
    get:
      tags:
        - BookingService
      summary: Получить все книги и пользователей с просрочкой
      operationId: getAllLoans
      security:
        - BearerToken: []
      parameters:
        - name: overdueDaysThreshold
          in: query
          required: false
          schema:
            type: integer
            description: Количество дней просрочки, после которых книга считается просроченной
        - name: filter
          in: query
          required: false
          schema:
            type: string
            default: userId
          description: Фильтр для поиска просроченных книг по параметру
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Номер страницы для пагинации
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Количество книг на странице для пагинации
        - name: userId
          in: query
          required: false
          schema:
            type: string
          description: Группировка по ID пользователя
        - name: refreshCache
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Если true, обновляет кэш просроченных книг
      responses:
        "200":
          description: Список просроченных книг и пользователей успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookLoan"
        "204":
          description: Список просроченных книг пуст
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - недостаточно прав для доступа к просроченным книгам
  /loans/{loanId}/return:
    post:
      tags:
        - BookingService
      summary: Вернуть книгу
      operationId: returnBook
      security:
        - BearerToken: []
      parameters:
        - name: loanId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Возвращение книги успешно выполнено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookLoan"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Staff access required
        "404":
          description: Loan not found

  # ImportService data import
  /imports/legacy/abonements:
    post:
      tags:
        - ImportService
      summary: Импортировать данные абонементов из устаревшего сервиса
      operationId: importImportServiceData
      security:
        - BearerToken: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Файл с данными абонементов для импорта
                dryRun:
                  type: boolean
                  default: false
                  description: Если true, выполняет проверку данных без внесения изменений
              required:
                - file
      responses:
        "200":
          description: Импорт данных успешно завершен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportResult"
        "400":
          description: Неверный формат файла или ошибка в данных
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Staff access required

  /imports/legacy/{importId}/status:
    get:
      tags:
        - ImportService
      summary: Получить статус импорта данных
      operationId: getImportStatus
      security:
        - BearerToken: []
      parameters:
        - name: importId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Статус импорта успешно получен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportResult"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Staff access required
        "404":
          description: Импорт не найден

  # ConfigurationsService configuration for overbooking
  /configs/books/{bookId}/overbooking:
    put:
      tags:
        - ConfigurationsService
      summary: Конфигурировать overbooking для книги
      operationId: configureOverbooking
      security:
        - BearerToken: []
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OverbookingConfig"
      responses:
        "200":
          description: Конфигурация overbooking успешно обновлена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OverbookingConfig"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Admin access required
        "404":
          description: Book not found
  # Настройка кол-во дней для блокировки абонемента пользователя при просрочке
  /configs/abonement/blockPolicy:
    put:
      tags:
        - ConfigurationsService
      summary: Конфигурировать политику блокировки абонемента
      operationId: configureAbonementBlockPolicy
      security:
        - BearerToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                overdueDaysThreshold:
                  type: integer
                  description: Количество дней просрочки, после которых абонемент будет заблокирован
              required:
                - overdueDaysThreshold
      responses:
        "200":
          description: Политика блокировки абонемента успешно обновлена
          content:
            application/json:
              schema:
                type: object
                properties:
                  overdueDaysThreshold:
                    type: integer
                    description: Количество дней просрочки, после которых абонемент будет заблокирован
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Admin access required
    get:
      tags:
        - ConfigurationsService
      summary: Получить текущую политику блокировки абонемента
      operationId: getAbonementBlockPolicy
      security:
        - BearerToken: []
      responses:
        "200":
          description: Политика блокировки абонемента успешно получена
          content:
            application/json:
              schema:
                type: object
                properties:
                  overdueDaysThreshold:
                    type: integer
                    description: Количество дней просрочки, после которых абонемент будет заблокирован
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Admin access required
  # Уведомление сотрудников о большой просрочке по даче книг, со стороны пользователя
  /configs/notifications/notificationPolicy:
    put:
      tags:
        - ConfigurationsService
      summary: Конфигурировать политику уведомлений о просроченных книгах
      operationId: configureNotificationPolicy
      security:
        - BearerToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                overdueDaysThreshold:
                  type: integer
                  description: Количество дней просрочки, после которых будет отправлено уведомление сотрудникам
              required:
                - overdueDaysThreshold
      responses:
        "200":
          description: Notification policy updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  overdueDaysThreshold:
                    type: integer
                    description: Количество дней просрочки, после которых будет отправлено уведомление сотрудникам
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Admin access required
    get:
      tags:
        - ConfigurationsService
      summary: Получить текущую политику уведомлений о просроченных книгах
      operationId: getNotificationPolicy
      security:
        - BearerToken: []
      responses:
        "200":
          description: Политика уведомлений о просроченных книгах успешно получена
          content:
            application/json:
              schema:
                type: object
                properties:
                  overdueDaysThreshold:
                    type: integer
                    description: Количество дней просрочки, после которых будет отправлено уведомление сотрудникам
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Admin access required
  # Уведомить пользователя о наступлении срока сдачи книги
  # Предупреждение, при выдаче книги пользователю с подходящем к концу сроком действия абонемента
  /notify:
    post:
      tags:
        - NotificationService
      summary: Отправить уведомление пользователю или сотруднику
      operationId: sendNotification
      security:
        - BearerToken: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    [
                      DUE_DATE_REMINDER,
                      OVERDUE_WARNING,
                      RESERVATION_READY,
                      ABONEMENT_EXPIRING,
                      STAFF_OVERDUE_ALERT
                    ]
                userId:
                  type: string
                  description: User to notify (optional for staff notifications)
                bookId:
                  type: string
                  description: Related book (optional)
                loanId:
                  type: string
                  description: Related loan (optional)
                message:
                  type: string
                  description: Custom message (optional)
                scheduledDate:
                  type: string
                  format: date-time
                  description: When to send notification (optional, defaults to now)
              required:
                - type
      responses:
        "200":
          description: Notification sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User or resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/check-overdue-blocks:
    post:
      tags:
        - Scheduler
      summary: Проверить просроченные выдачи пользователей
      operationId: checkOverdueBlocks
      security:
        - BearerToken: []
      responses:
        "200":
          description: Проверка просроченных выдач успешно выполнена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutLoan"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Admin access required
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
          description: Error code for programmatic handling
        errorMessage:
          type: string
          description: Error message detailing the issue
        timestamp:
          type: string
          format: date-time
        path:
          type: string
          description: API path that generated the error

    Book:
      type: object
      properties:
        bookId:
          type: string
          description: Unique identifier for the book
        title:
          type: string
          description: Title of the book
        isbn:
          type: string
          description: ISBN number of the book
        publicationDate:
          type: string
          format: date
          description: Publication date of the book
        authors:
          type: array
          items:
            $ref: "#/components/schemas/Author"
          description: List of book authors
        publisher:
          $ref: "#/components/schemas/Publisher"
        totalCopies:
          type: integer
          description: Total number of copies available in the library
        availableCopies:
          type: integer
          description: Number of copies currently available for borrowing
        reservedCopies:
          type: integer
          description: Number of copies currently reserved
        overbookingEnabled:
          type: boolean
          description: Indicates if overbooking is enabled for this book
        availabilityStatus:
          type: string
          enum: [AVAILABLE, LIMITED, RESERVED_ONLY, UNAVAILABLE, OVERBOOKED]
          description: Current availability status

    Author:
      type: object
      properties:
        authorId:
          type: string
        name:
          type: string
        biography:
          type: string

    Publisher:
      type: object
      properties:
        publisherId:
          type: string
        name:
          type: string
        address:
          type: string

    CheckoutLoan:
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier for the user
        username:
          type: string
          description: Username of the user
        fullName:
          type: string
          description: Full name of the user
        abonementId:
          type: string
          description: Identifier of the user's abonement
        overdueLoans:
          type: array
          items:
            $ref: "#/components/schemas/BookLoan"
          description: List of overdue loans for the user
        totalOverdueDays:
          type: integer
          description: Total number of days overdue across all loans
        totalFineAmount:
          type: number
          format: double
          description: Total fine amount for overdue loans
    Reservation:
      type: object
      properties:
        reservationId:
          type: string
        userId:
          type: string
        bookId:
          type: string
        book:
          $ref: "#/components/schemas/Book"
        reservationDate:
          type: string
          format: date-time
        expiryDate:
          type: string
          format: date-time
        status:
          type: string
          enum:
            [
              PENDING,
              CONFIRMED,
              READY_FOR_PICKUP,
              FULFILLED,
              EXPIRED,
              CANCELLED,
            ]
        priority:
          type: integer
        isOverbooking:
          type: boolean

    BookLoan:
      type: object
      properties:
        loanId:
          type: string
        userId:
          type: string
        bookId:
          type: string
        book:
          $ref: "#/components/schemas/Book"
        reservationId:
          type: string
        issuedByStaffId:
          type: string
        issueDate:
          type: string
          format: date
        dueDate:
          type: string
          format: date
        returnDate:
          type: string
          format: date
        status:
          type: string
          enum: [ACTIVE, RETURNED, OVERDUE, LOST, RENEWED]
        renewalCount:
          type: integer
        fineAmount:
          type: number
          format: double
        daysOverdue:
          type: integer
        isOverdue:
          type: boolean

    UserStatus:
      type: object
      properties:
        userId:
          type: string
        username:
          type: string
        fullName:
          type: string
        abonement:
          $ref: "#/components/schemas/Abonement"
        activeLoans:
          type: array
          items:
            $ref: "#/components/schemas/BookLoan"
        activeReservations:
          type: array
          items:
            $ref: "#/components/schemas/Reservation"
        overdueLoans:
          type: array
          items:
            $ref: "#/components/schemas/BookLoan"
        totalFines:
          type: number
          format: double

    OverdueNotification:
      type: object
      properties:
        userId:
          type: string
        username:
          type: string
        fullName:
          type: string
        bookTitle:
          type: string
        loanId:
          type: string
        daysOverdue:
          type: integer
        fineAmount:
          type: number
        dueDate:
          type: string
          format: date
        urgencyLevel:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]

    ImportResult:
      type: object
      properties:
        importId:
          type: string
        fileName:
          type: string
        status:
          type: string
          enum: [PENDING, PROCESSING, COMPLETED, FAILED, PARTIALLY_COMPLETED]
        totalRecords:
          type: integer
        successfulRecords:
          type: integer
        failedRecords:
          type: integer
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        errors:
          type: array
          items:
            type: object
            properties:
              row:
                type: integer
              error:
                type: string
              data:
                type: object

    OverbookingConfig:
      type: object
      properties:
        bookId:
          type: string
        overbookingPercentage:
          type: number
          format: double
          minimum: 0
          maximum: 100
          description: Percentage of total copies that can be overbooked
        maxOverbookingCount:
          type: integer
          minimum: 0
          description: Maximum absolute number of overbookings allowed
        isEnabled:
          type: boolean
        priorityThreshold:
          type: integer
          description: Priority level required for overbooking

    NotificationResponse:
      type: object
      properties:
        notificationId:
          type: string
        status:
          type: string
          enum: [SENT, SCHEDULED, FAILED]
        message:
          type: string
        scheduledDate:
          type: string
          format: date-time
    CheckoutLoan:
      type: object
      properties:
        loanId:
          type: string
        bookId:
          type: string
        reservationId:
          type: string
        checkoutDate:
          type: string
          format: date-time
        dueDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [ACTIVE, RETURNED, OVERDUE, LOST, RENEWED]
        fineAmount:
          type: number
          format: double
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.example.com/oauth/authorize
          tokenUrl: https://auth.example.com/oauth/token
          scopes:
            read: Grants read access to the API
            write: Grants write access to the API
            admin: Grants administrative access
    BearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Use a valid JWT token for authentication

security:
  - BearerToken: []
