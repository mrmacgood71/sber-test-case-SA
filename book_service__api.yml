openapi: 3.0.4

info:
  title: Book Service API
  version: 1.0.0
  description: API for managing books in a library system
servers:
  - url: https://devUrl/api/v1
  - url: https://testUrl/api/v1
  - url: https://predProdUrl/api/v1
  - url: https://prodUrl/api/v1
tags:
  - name: Books
    description: Operations related to books in the library
  - name: Abonement
    description: Operations related to abonements in the library
paths:
  /books:
    get:
      tags:
        - Books
      parameters:
        - name: filter
          in: query
          required: false
          schema:
            type: string
            default: book.bookId
          description: Facet filter for books by parameter
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of books per page for pagination
        - name: order
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
          description: Sort order for the books (asc or desc)
      summary: Get all books
      operationId: getAllBooks
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '204':
          description: No books found, possibly due to no books matching the filter or pagination parameters
        '400':
          description: Bad request, possibly due to invalid filter or pagination parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "BOOK_LISTING_ERROR"
                errorMessage: "Invalid filter or pagination parameters provided."
        '401':
          description: Unauthorized, user must be logged in to view books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "BOOK_LISTING_ERROR"
                errorMessage: "Unauthorized access. Please log in to view the book list."
        '500':  
          description: Internal server error, possibly due to database issues
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "BOOK_LISTING_ERROR"
                errorMessage: "An unexpected error occurred while retrieving the book list."

  /books/{bookId}/reserve:
    post:
      tags:
        - Books
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the book to reserve
      summary: Reserve a book
      operationId: reserveBook
      responses:
        '200':
          description: Book reserved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request, possibly invalid book ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "BOOK_RESERVATION_ERROR"
                errorMessage: "Unable to reserve the book due to invalid book ID: -1234."
        '401':
          description: Unauthorized, user must be logged in to reserve a book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "BOOK_RESERVATION_ERROR"
                errorMessage: "Unable to reserve the book due to unauthorized access. Please log in."
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "BOOK_RESERVATION_ERROR"
                errorMessage: "Book not found with the provided ID."
        '409':
          description: Conflict, possibly due to overbooking or insufficient copies available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "BOOK_RESERVATION_ERROR"
                errorMessage: "Book reservation conflict. Overbooking is not allowed or insufficient copies available."
  /abonements:
    get:
      parameters:
        - name: userId
          in: query
          required: false
          schema:
            type: string
          description: Unique identifier for the user to filter abonements   
      tags:
        - Abonement
      summary: Get all abonements
      operationId: getAllAbonements
      security:
        - BearerToken: []
      responses:
        '200':
          description: A list of abonements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Abonement'
        '204':
          description: No abonements found
        '400':
          description: Bad request, possibly due to invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "ABONEMENT_LISTING_ERROR"
                errorMessage: "Invalid parameters provided for abonement listing."
        '401':
          description: Unauthorized, user must be logged in to view abonements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "ABONEMENT_LISTING_ERROR"
                errorMessage: "Unauthorized access. Please log in to view the abonement list."
        '500':  
          description: Internal server error, possibly due to database issues
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "ABONEMENT_LISTING_ERROR"
                errorMessage: "An unexpected error occurred while retrieving the abonement list."
  /notify:
    post:
      tags:
        - Notification
      summary: Notify user about the end of book reservation
      operationId: notifyEndReserve
      security:
        - BearerToken: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [DUE_DATE_REMINDER, OVERDUE_WARNING, RESERVATION_READY, ABONEMENT_EXPIRING, STAFF_OVERDUE_ALERT, SYSTEM_NOTIFICATION]
                userId:
                  type: string
                  description: Unique identifier for the user to notify
                bookId:
                  type: string
                  description: Unique identifier for the book
              required:
                - type
                - userId
                - bookId
      responses:
        '200':
          description: Notification sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Notification sent successfully."
        '400':
          description: Bad request, possibly due to missing parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "NOTIFICATION_ERROR"
                errorMessage: "Invalid parameters provided for notification."
        '404':
          description: User or book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "NOTIFICATION_ERROR"
                errorMessage: "User or book not found."
        '500':
          description: Internal server error, possibly due to notification service issues
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "NOTIFICATION_ERROR"
                errorMessage: "An unexpected error occurred while sending the notification."


components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
          description: Error code for programmatic handling
        errorMessage:
          type: string
          description: Error message detailing the issue
    Book:
      type: object
      properties:
        bookId:
          type: string
          description: Unique identifier for the book
        title:
          type: string
          description: Title of the book
        isbn:
          type: string
          description: ISBN number of the book
        publicationDate:
          type: string
          format: date
          description: Publication date of the book
        totalCopies:
          type: integer
          description: Total number of copies available in the library
        availableCopies:
          type: integer
          description: Number of copies currently available for borrowing
        reservedCopies:
          type: integer
          description: Number of copies currently reserved
        overbookingEnabled:
          type: boolean
          description: Indicates if overbooking is enabled for this book
    Abonement:
      type: object
      properties:
        abonementId:
          type: string
          description: Unique identifier for the abonement
        userId:
          type: string
          description: Unique identifier for the user who owns the abonement
        startDate:
          type: string
          format: date
          description: Start date of the abonement
        endDate:
          type: string
          format: date
          description: End date of the abonement
        status: 
          type: string
          description: Current status of the abonement (e.g., active, expired, cancelled)
        issue_date: 
          type: string
          format: date
          description: Date when the abonement was issued
        expiry_date: 
          type: string
          format: date
          description: Date when the abonement expires
        max_books_allowed: 
          type: integer
          description: Maximum number of books allowed to be borrowed with this abonement
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.example.com/oauth/authorize
          tokenUrl: https://auth.example.com/oauth/token
          scopes:
            read: Grants read access to the API
            write: Grants write access to the API
    BearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Use a valid JWT token for authentication